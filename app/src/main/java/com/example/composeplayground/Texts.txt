# Jetpack Compose: Exploring Text Composables

Jetpack Compose, Android's modern toolkit for building native UI, offers a powerful and flexible way to display text.
The `Text` composable is a fundamental building block for any UI and can be customized extensively to suit various design needs.
This README explores different ways to use and style text in Jetpack Compose.

## Basic Text Display

### SimpleText Composable
The most straightforward use of `Text` is to display a string of text:

```kotlin
@Composable
fun SimpleText() {
    Text("Hello, Jetpack Compose!")
}
```

This function creates a text element with the string "Hello, Jetpack Compose!".

## Styling Text

### StyledText Composable
Jetpack Compose allows for extensive styling of text, including setting font size, color, weight, and style:

```kotlin
@Composable
fun StyledText() {
    Text(
        text = "Stylish Text",
        color = Color.Blue,
        fontSize = 20.sp,
        fontWeight = FontWeight.Bold,
        fontStyle = FontStyle.Italic
    )
}
```

This example demonstrates how to create bold, italicized text in blue color with a font size of 20.sp.

## Applying Multiple Styles

### MultiStyledText Composable
To apply different styles within the same `Text` element, `AnnotatedString` is used:

```kotlin
@Composable
fun MultiStyledText() {
    val annotatedText = buildAnnotatedString {
        withStyle(style = SpanStyle(color = Color.Red)) {
            append("Red ")
        }
        withStyle(style = SpanStyle(fontWeight = FontWeight.Bold, fontSize = 20.sp)) {
            append("Bold ")
        }
        append("Text")
    }

    Text(annotatedText)
}
```

This function creates a text element where "Red" is colored red, "Bold" is bold and larger, and "Text" is in default styling.

## Text Alignment and Overflow

### AlignedText Composable
Text alignment and handling overflow is crucial for a polished UI:

```kotlin
@Composable
fun AlignedText() {
    Text(
        "Aligned Text Aligned Text Aligned Text Aligned Text Aligned Text Aligned Text Aligned Text Aligned Text",
        modifier = Modifier.width(150.dp),
        textAlign = TextAlign.Center,
        overflow = TextOverflow.Ellipsis,
        maxLines = 1
    )
}
```

This example shows text aligned to the center, with an ellipsis used to indicate overflow beyond a single line.

## Interactive Text

### ClickableTextComposable
Text elements can be made interactive, such as making a part of the text clickable:

```kotlin
@Composable
fun ClickableTextComposable() {
    val context = LocalContext.current
        val annotatedText = buildAnnotatedString {
            append("Click ")
            pushStringAnnotation(tag = "URL", annotation = "https://www.example.com")
            withStyle(style = SpanStyle(color = Color.Blue, textDecoration = TextDecoration.Underline)) {
                append("here")
            }
            pop()
        }

        ClickableText(
            text = annotatedText,
            onClick = { offset ->
                annotatedText.getStringAnnotations(tag = "URL", start = 0, end = annotatedText.length)
                    .firstOrNull { annotation ->
                        offset in annotation.start..annotation.end
                    }?.let { annotation ->
                        context.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(annotation.item)))
                    }
            }
        )
}
```

This function creates a text element where the word "here" is clickable, opening a URL in the browser.

## Custom Fonts

### CustomFontText Composable
Custom fonts can be applied to text for unique branding and style:

```kotlin
@Composable
fun CustomFontText() {
    val customFont = FontFamily(Font(R.font.rockb, FontWeight.Normal))
    Text("Custom Font Text", fontFamily = customFont, fontSize = 16.sp)
}
```

This example demonstrates how to apply a custom font to the text.

## Conclusion

Text in Jetpack Compose is not just about displaying information;
it's about creating an engaging and accessible experience for users. With its wide range of customization options,
`Text` becomes a powerful tool in the Compose toolkit, allowing developers to create rich, styled, and interactive text elements with ease.
