# Jetpack Compose: Mastering TextFields

Jetpack Compose offers a versatile `TextField` composable for user input, akin to EditText in traditional Android views.
This README covers various aspects of using `TextField` in Compose, including basic usage, styling, and handling user input.

## Basic TextField

### SimpleTextField Composable
The simplest form of a `TextField` is one that allows basic text input:

```kotlin
@Composable
fun SimpleTextField() {
    var text by remember { mutableStateOf("") }

    TextField(
        value = text,
        onValueChange = { text = it },
        label = { Text("Enter text") }
    )
}
```

This composable creates a basic text field with a label. The `text` state is updated with the current input.

## Styling TextField

### StyledTextField Composable
`TextField` can be styled extensively to match your application's theme:

```kotlin
@Composable
fun StyledTextField() {
    var text by remember { mutableStateOf("") }

    TextField(
        value = text,
        onValueChange = { text = it },
        label = { Text("Styled Text") },
        colors = TextFieldDefaults.textFieldColors(
            textColor = Color.Blue,
            backgroundColor = Color.LightGray,
            cursorColor = Color.Red
        )
    )
}
```

This example demonstrates a `TextField` with custom text, background, and cursor colors.

## Handling User Input

### InputHandlingTextField Composable
Handling user input is a critical aspect of using `TextField`:

```kotlin
@Composable
fun InputHandlingTextField() {
    var text by remember { mutableStateOf("") }
    val context = LocalContext.current

    TextField(
        value = text,
        onValueChange = { text = it },
        label = { Text("Enter text") },
        keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),
        keyboardActions = KeyboardActions(onDone = {
            Toast.makeText(context, "Input: $text", Toast.LENGTH_SHORT).show()
        })
    )
}
```

In this composable, a toast message is displayed when the user presses the "Done" button on the keyboard.

## TextField with Validation

### ValidatingTextField Composable
Implementing validation logic in `TextField` enhances data integrity:

```kotlin
@Composable
fun ValidatingTextField() {
    var text by remember { mutableStateOf("") }
    val isValid = text.length >= 5

    TextField(
        value = text,
        onValueChange = { text = it },
        label = { Text("Enter at least 5 characters") },
        isError = !isValid,
        trailingIcon = {
            if (!isValid) Icon(Icons.Filled.Error, contentDescription = "Error")
        }
    )
}
```

This `TextField` shows an error icon when the input is less than 5 characters.

## Password TextField

### PasswordTextField Composable
Creating a `TextField` for password input with visibility toggle:

```kotlin
@Composable
fun PasswordTextField() {
    var text by remember { mutableStateOf("") }
    var passwordVisible by remember { mutableStateOf(false) }

    TextField(
        value = text,
        onValueChange = { text = it },
        label = { Text("Password") },
        visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),
        trailingIcon = {
            val image = if (passwordVisible) Icons.Filled.Visibility else Icons.Filled.VisibilityOff
            IconButton(onClick = { passwordVisible = !passwordVisible }) {
                Icon(image, "Toggle password visibility")
            }
        }
    )
}
```

This composable includes a toggle icon to show or hide the password.

## Conclusion

`TextField` in Jetpack Compose is a powerful tool for gathering user input.
Its versatility allows it to be easily adapted for various use cases, from simple text input to complex forms with validation.
By leveraging Compose's declarative syntax and state handling, developers can create intuitive and responsive text input fields
that enhance user experience.